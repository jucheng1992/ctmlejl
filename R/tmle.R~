##' .. content for \description{} A function compute tmle estimate based on julia package TargetedLearning.jl.
##'
##' .. content for \details{} ..
##' @title tmle
##' @param logitQnA1 numeric vector containing initial estimates for treatment group in logit scale.
##' @param logitQnA0 numeric vector containing initial estimates for control group in logit scale.
##' @param W numeric matrix or dataframe, stand for covariates.
##' @param A numeric 1-0 vector, stand for treatment.
##' @param Y numeric vector, stand for outcome.
##' @param gn1 a numeric vector stand for the predicted probability for treatment (propensity score).
##' @param param a string stand for different target parameter. "ATE" stands for additive  treatment effect, Mean1 and Mean0 stand for the mean outcome in treatment or control group.
##' @return A list for targeted estimator and standard error.
##' @author Cheng JU
##' @export
tmle <- function(logitQnA1, logitQnA0,
                  W, A, Y, gn1,
                  param = "ATE"){
      # This function will call ctmle in TargetedLearning.jl from julia.
      #
      # Args:
      #     logitQnA1: Vector of length n of initial estimates QnA1 in logit scale.
      #     logitQnA0: Vector of length n of initial estimates QnA0 in logit scale.
      #     W: Matrix of covariates to be potentially used to estimate g. n rows.
      #           (Do not require add ones for first column. This function will do it later.)
      #     A: Vector of length n of treatments, 0.0 or 1.0.
      #     Y: Vector of length n of outcomes, bounded between 0 and 1.
      #     param: a string stand for different target parameter. "ATE" stands for additive
      #           treatment effect, Mean1 and Mean0 stand for the mean outcome in treatment
      #           or control group.
      
      
      # Add ones as first column of W
      # This is required by cTMLE in julia.
      n <- length(A)
      W <- cbind(rep(1, n), W)
      
      # Change variables to julia.
      r2j(Y, "outcome")
      r2j(A, "treatment")
      r2j(W, "baseline_covars")
      r2j(logitQnA1, "logitQnA1")
      r2j(logitQnA0, "logitQnA0")
      julia_void_eval("n=length(treatment)")
      
      # Convert some variables to the required data type.
      julia_void_eval("treatment = convert(Array{Float64}, treatment)")
      julia_void_eval("outcome = convert(Array{Float64}, outcome)")
      
      if (param == "ATE"){
            julia_void_eval("param = ATE()")
      }else if (param == "Mean1"){
            julia_void_eval("param = Mean(1)")
      }else if (param == "Mean0"){
            julia_void_eval("param = Mean(0)")
      }else{
            stop("The options for param is ATE, Mean1 and Mean0")
      }
      
      r2j(gn1, "gn1")
      julia_eval("ctmle_res =  tmle(logitQnA1, logitQnA0,
                       gn1, treatment, outcome, param=ATE(), weightedfluc=false,
                                                       param = param)")      
      se <- j2r("sqrt(var(ctmle_res.ic))/sqrt(n)")
      psi <- j2r("ctmle_res.psi")
      result <- list(psi = psi, se = se )
      return(result)
}






